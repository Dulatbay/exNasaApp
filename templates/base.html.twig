<!DOCTYPE html>
<html lang="">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Welcome!{% endblock %}</title>
    <link rel="icon"
          href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text></svg>">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
    {# Run `composer require symfony/webpack-encore-bundle` to start using Symfony UX #}
    {% block stylesheets %}
        {{ encore_entry_link_tags('app') }}

    {% endblock %}
    {% block javascripts %}
        {{ encore_entry_script_tags('app') }}
    {% endblock %}


</head>
<body>
{% block header %}
    {# TODO: make a notofication about authentification user #}
    <header>
        <div class="header-wrapper">
            <div class="header-content">
                <div class="header-profile header-item">
                    {# TODO: make avatar for user #}
                    <div class="header-profile__image">
                        <img src="/images/account.svg" alt=".."/>
                    </div>
                    {# TODO: ,make a link to go to the profile to set a new name #}
                    <div class="header-profile__username">
                        {#  <p>{{ app.user.email }}</p> #}
                        <p>Here's username</p>
                    </div>
                    <div class="header-profile__notifications">
                        <div class="notifications__dote"></div>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white"
                             class="bi bi-bell-fill" viewBox="0 0 16 16">
                            <path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zm.995-14.901a1 1 0 1 0-1.99 0A5.002 5.002 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901z"/>
                        </svg>
                    </div>
                </div>
                <div class="header-item header-home">
                    <a href="/homepage">Home page</a>
                </div>
                <div class="header-item header-apod">
                    <a href="#">APOD</a>
                </div>
                <div class="header-item header-mars">
                    <a href="#">Go to Mars</a>
                </div>
                <div class="header-item header-rover">
                    <a href="#">See rovers</a>
                </div>
                <div class="header-item header-weather">
                    <a href="#">Weather map</a>
                </div>
                {# Make this panel at the and #}
                <div class="header-item header-3dModel">
                    <a href="#">3D model</a>
                </div>
            </div>
        </div>
    </header>
{% endblock %}
{% block body %}
    <div class="home-body">
        <div class="home-wrapper">

            <div class="home-create__post homepage-item">
                <form id="create-post-form">
                    <div class="create-post-input_field">
                        <textarea id="create-post-input_text"
                                  rows="1"
                                  type="text"
                                  placeholder="Create post"
                                  name="title"></textarea>
                        <div class="create-post-label_file">
                            <label for="create-post-input_file">
                                <img src="images/add-file.svg"/>
                            </label>
                            <input id="create-post-input_file"
                                   type="file"
                                   name="files[]"
                                   multiple>
                        </div>
                    </div>
                    <div id="create-post-file_list">

                    </div>
                    {# TODO: make animation #}
                    <div id="create-post-buttons">
                        <button type="button"
                                id="clear-post-button"
                                class="btn btn-outline-danger">
                            Clear
                        </button>
                        <button type="button"
                                id="create-post-button"
                                class="btn btn-dark">
                            Create
                        </button>
                    </div>
                </form>
            </div>
            {% for post in posts %}
                {% include 'components/post-cart.html.twig' with {'post': post} %}
            {% endfor %}

        </div>
    </div>
{% endblock %}

{% block scripts %}
    <script>
        let selectedFiles = [];
        let isShowButtons = false;


        let fileList = document.getElementById('create-post-file_list')
        let form = document.getElementById('create-post-form');
        let input = document.getElementById('create-post-input_text')
        let createBtn = document.getElementById('create-post-button');
        let clearBtn = document.getElementById('clear-post-button')
        let btns = document.getElementById('create-post-buttons')
        let inputFile = document.getElementById('create-post-input_file')

        inputFile.addEventListener('change', (e) => {
            const files = e.target.files;
            selectedFiles.push(...Array.from(files));
            setIsShowButtons()
            showOrHideButtons()
            renderFiles();
        })

        function renderFiles() {
            fileList.innerHTML = ''
            for (let i = 0; i < selectedFiles.length; i++)
                fileList.append(getDivByFile(selectedFiles[i], i));
        }

        function showOrHideButtons() {
            btns.style.display = isShowButtons ? 'flex' : 'none';
        }

        function setIsShowButtons() {
            isShowButtons = ((selectedFiles.length !== 0 || input.value.trim() !== ''))
        }

        input.addEventListener('input', () => {
            console.log(1);
            setIsShowButtons()
            showOrHideButtons()
            input.style.height = 'auto';
            input.style.height = `${input.scrollHeight}px`;
        });
        input.addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                input.style.height = `${input.scrollHeight}px`;
            }
        });
        input.addEventListener('keyup', () => {
            if (input.value.length === 0) {
                input.style.height = 'auto';
            }
        });
        createBtn.addEventListener('click', (e) => {
            console.log("SUBMIT", form);
            e.preventDefault();
            let arrLines = getArrayTextByInput(input.value);
            let title = arrLines.shift(),
                contentText = arrLines.join('\n');
            let formData = new FormData();
            formData.set('title', title)
            formData.set('contentText', contentText)
            selectedFiles.forEach(file => {
                formData.append('files[]', file);
            });
            console.log(formData.getAll('files[]'));
            fetch('{{ path('create_post') }}', {
                method: 'POST',
                body: formData
            }).then(response => {
                if (response.ok) {
                    clearFields();
                    return response.json();
                } else {
                    console.log(response);
                }
            }).then(json => {
                console.log(JSON.parse(json[0]));
            }).catch(error => {
                console.log(formData);
                console.log('There was a problem with the fetch operation:', error);
            });
        });
        clearBtn.addEventListener('click', () => clearFields())

        function clearFields() {
            selectedFiles = []
            input.value = ''
            setIsShowButtons()
            showOrHideButtons()
            renderFiles();

        }

        function getDivByFile(file, index) {
            const getImage = (fileName, width) => {
                const img = document.createElement('img');
                img.src = `images/${fileName}.svg`
                img.width = width;
                // height = auto
                return img;
            }
            const getFileName = () => {
                const span = document.createElement('span')
                span.textContent = file.name;
                span.classList.add('text-truncate')
                return span;
            }
            const getRemoveButton = () => {
                const fileIconContainer = document.createElement('div');
                fileIconContainer.classList.add('file-icon-container');
                fileIconContainer.addEventListener('click', (e) => {
                    console.log(e.target);
                    selectedFiles.splice(index, 1);
                    fileItem.remove();
                    renderFiles();
                    setIsShowButtons()
                    showOrHideButtons()
                })
                fileIconContainer.append(getImage('icon-file', 40))

                return fileIconContainer;
            }


            const fileItem = document.createElement('div')
            fileItem.classList.add('file-item')
            fileItem.append(getRemoveButton());
            fileItem.append(getFileName())


            return fileItem;
        }

        function getArrayTextByInput(text) {
            return text.split('\n');
        }
    </script>
{% endblock %}
</body>
</html>
